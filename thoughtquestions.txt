1.  Constant functions appear to stay constant at any queue size.  The *0(N) functions take more time to execute because larger queues use more memory, which takes more time to juggle.2.  The unsorted array is pretty slow and it is limited in size, but it is easy to understand.  The linked list is really slow and ugly and it uses a lot of memory, but it can hold unlimited elements.  The heap is fast and can hold unlimited elements, but it is not as easy to understand as an array.3.  The heap is fast.  It appeals to me.  I would also use it for space, because it only grows to be a little bit bigger than the needed size.  The heap was also the easiest to understand, although the array implementation would have been easier to follow if all the functions weren't so decomposed and separated.4.  ExtractMax is more important than Insert because the most important thing about a priority queue is finding the maximum immediately.5.  The array implementation would be easiest to use as a FIFO or priority queue because you insert the elements sequentially in the first place.6.  I might propose a hybrid or unique implemention of a priority queue that was really efficient and used very little space.