/* * File: queue.h * Last modified on Thu Nov 14 21:03:11 1996 by jzelenski * ----------------------------------------------------- * Defines an abstraction for the priority queue ADT.  This queue is not * simple FIFO queue, it is a priority queue, where elements are * retrieved in order of priority, not just by longevity in queue. * The type is exported as an "abstract data type," defined conceptually  * only by the operations  on that type. Clients should not make any  * assumptions about the underlying representation. */  #ifndef _pqueue_h#define _pqueue_h#include "genlib.h"#define NOT_FOUND -1/* * Type: pqueueADT * ---------------------- * This is the abstract type for a priority queue.  The type definition * below is "incomplete".  Clients know that pqueueADT is a pointer to * a struct tagged "pqueueCDT" but that's it.  No details of the size, * field names, and types of the structure are visible to the client since * we want to keep them on their side of the wall! */typedef struct pqueueCDT *pqueueADT;/* * Function: NewPriorityQueue * Usage: queue = NewPriorityQueue(); * --------------------------------- * Returns a new empty pqueueADT with no elements.   */pqueueADT NewPriorityQueue(void);/* * Function: FreeQueue * Usage: FreeQueue(queue); * ------------------------ * Frees all the storage associated with the queue. */void FreeQueue(pqueueADT queue);/* * Function: IsEmpty * Usage: if (IsEmpty(queue)) . . . * -------------------------- * Returns TRUE if queue has no entries. */bool IsEmpty(pqueueADT queue);/* * Function: IsFull * Usage: if (IsFull(queue)) . . . * -------------------------- * Returns TRUE if queue has no more room for entries.  Clients can use * this to check if any further Insert operation will overflow the * ability of the queue to handle it. Some versions of the pqueue may  * never return TRUE if they can always accommodate more entries. */bool IsFull(pqueueADT queue);/* * Function: Insert * Usage: Insert(queue, 4); * -------------------------- * Adds the specified integer value to the queue. No effort is made to * avoid duplicates.  If the queue is full, this function raises an error. */void Insert(pqueueADT queue, int newElem);/* * Function: ExtractMax * Usage: largest = ExtractMax(queue); * ----------------------------------- * Removes the largest priority element from the queue and * returns its value.  If the queue is empty, this function * raises an error. */int ExtractMax(pqueueADT queue);/* * Function: Search * Usage: foundElem = Search(queue, 4); * ----------------------------------- * Searches for the given value in the queue and returns the found value * or NOT_FOUND to indicate no such element exists in the queue. If multiple * occurrences exist, it doesn't matter which is returned.  (It turns out * for this version it isn't even distinguishable, since if found, the * return result is always the same number you searched for.) */int Search(pqueueADT queue, int key);/* * Function: Delete * Usage: deleted =  Delete(queue, 4); * ----------------------------------- * Removes the occurrence of the specified elem if found in the queue and * returns the value removed. If duplicates exist, it is not guaranteed which entry  * is deleted. (Again, like Search, this return value doesn't tell you anything * you didn't know, but later it will matter).  If the element is not found,  * the queue contents are not changed and NOT_FOUND is returned. */int Delete(pqueueADT queue, int elem);#endif