/* * File: queueTest.h * ----------------------------------------------------- * This module exports some functions to test the different * operations of a priority queue ADT.  These functions are useful for * testing a new implementation for correctness. */#ifndef _queuetest_h#define _queuetest_h#include "pqueue.h"/* * Function: BasicQueueTest * Usage: BasicQueueTest(); * -------------------- * Runs a test of the queueADt focusing on simple Insert, ExtractMax. * Reports results of test to stdout. */void BasicQueueTest(void);/* * Function: MoreQueueTest * Usage: MoreQueueTest(); * -------------------- * Tests a few more Insert, Extract, some boundary cases explored. * Reports results of test to stdout. */void MoreQueueTest(void);/* * Function: AnotherQueueTest * Usage: AnotherQueueTest(); * ---------------------- * Tests the Search and Delete functionality we included in the pqueue. * Reports results of test to stdout. */void AnotherQueueTest(void);/* * Function: SortTest * Usage: SortTest(); * -------------------- * Tests the use of the priority queue to implement a Heapsort algorithm.  Inserts * a bunch of values into queue and then pull them out using ExtractMax to arrange in * array in sorted order.  Tries it with random data inserted and then 2 more times * with data inserted in sorted order (both forward and backward) to learn how * the performance is affected by already sorted data. */void SortTest(void);/* * Function: Heapsort * Usage: Heapsort(queue, array, size); * -------------------- * Uses the priority queue to implement a Heapsort algorithm.  Inserts all * values in the array into the queue and then pulls them out with Remove * and assigns back into array in increasing sorting order.  Depending on * the running times of the underlying queueADT, this can be a pretty * decent sorting algorithm. */void Heapsort(pqueueADT queue, int array[], int size);#endif